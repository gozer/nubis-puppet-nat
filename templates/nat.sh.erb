#!/bin/bash
# 1. Instance should be in an Availability Autoscaling group with min/max size of 1
#    Example Autoscaling launch configuration:
#       aws autoscaling create-auto-scaling-group --auto-scaling-group-name ha-nat-asg\
#           --launch-configuration-name ha-nat-launch --min-size 1 --max-size 1\
#           --vpc-zone-identifier subnet-xxxxxxxx
#
# 2. AWS CLI version 1.2.2 or higher. By default, script will update instance to the latest version.
# 3. Private subnets must be tagged with tag Name=network and Value=private. Case IS sensitive.
# 4. IAM EC2 Role must be applied to instance:
#
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": [
#           "ec2:DescribeInstances",
#           "ec2:DescribeNetworkInterfaces",
#           "ec2:ModifyNetworkInterfaces"
#       ],
#       "Resource": "*"
#     }
#   ]
# }

# Enable for debugging
#set -x

. /usr/local/lib/util.sh

# This variable is generated by puppet
NAT_INTERFACE="<%= @nat_interface %>"

function __get_mac {
    if [[ -z "${1}" ]]; then echo "Usage: $FUNCNAME [interface]"; return 1; fi

    local attempts=10
    local interface=$1
    false
    while [[ "${?}" -gt 0 ]]; do
        [[ "${attempts}" -eq 0 ]] && return
        mac_addr=$(cat /sys/class/net/${interface}/address)
        if [ "${?}" -gt 0 ]; then
            let attempts--
            sleep 3
            false
        fi
    done
    echo "${mac_addr}"
}

function __get_availability_zone() {
    local availability_zone=$(curl --retry 3 --retry-delay 0 -s -fq http://169.254.169.254/latest/meta-data/placement/availability-zone)
    echo "${availability_zone}"
}

function __get_instance_id() {
    local instance_id=$(curl --retry 3 --retry-delay 0 -s -fq http://169.254.169.254/latest/meta-data/instance-id)
    echo "${instance_id}"
}

function get_vpc_id() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [instance id]"; return 1; fi

    local instance_id=$1
    local vpc_id=$(aws --region "${REGION}" ec2 describe-instances --instance-ids "${instance_id}" --query 'Reservations[*].Instances[*].VpcId' --output text)
    echo "${vpc_id}"
}

function get_private_subnets() {
    local vpc_id=$1
    aws ec2 describe-subnets \
        --region "${REGION}" \
        --filter \
            Name=availability-zone,Values=$(__get_availability_zone) \
            Name=vpc-id,Values="${vpc_id}" \
            Name=state,Values=available \
            Name=tag-value,Values='PrivateSubnet*' \
        --query \
            'Subnets[*].SubnetId' \
        --output text
}

function check_default_route_eni() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [subnet id]"; return 1; fi

    local subnet_id=$1
    aws ec2 describe-route-tables \
        --region "${region}" \
        --filter \
            Name=tag-value,Values='PrivateSubnet*',Name=tag-value,Values="${NUBIS_ENVIRONMENT}"\
            Name=association.subnet-id,Values="${subnet_id}"\
        --query \
            'RouteTables[*].Routes[?DestinationCidrBlock == `0.0.0.0/0`].NetworkInterfaceId' \
        --output text
}

function get_rtb_id() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [subnet-id]"; return 1; fi

    local subnet_id=$1
    aws ec2 describe-route-tables \
        --region "${REGION}" \
        --filter \
            Name=association.subnet-id,Values="${subnet_id}" \
        --query \
            'RouteTables[*].RouteTableId' \
        --output text
}

function get_main_rtb() {
    if [ -z "$1" ]; then echo "Usage: $FUNCNAME [vpc id]"; return 1; fi

    local vpc_id=$1

    aws ec2 describe-route-tables\
        --region "${REGION}"\
        --filter \
            Name=vpc-id,Values="${vpc_id}"\
            Name=association.main,Values=true\
        --query \
            'RouteTables[*].RouteTableId'\
        --output text
}

log "Beginning Port Address Translator (PAT) configuration..."
log "Determining the MAC address on ${NAT_INTERFACE}..."
ETH_MAC=$(__get_mac ${NAT_INTERFACE}) ||
    die "Unable to determine MAC address on ${NAT_INTERFACE}."
log "Found MAC ${ETH_MAC} for ${NAT_INTERFACE}."

VPC_CIDR_URI="http://169.254.169.254/latest/meta-data/network/interfaces/macs/${ETH_MAC}/vpc-ipv4-cidr-block"
log "Metadata location for vpc ipv4 range: ${VPC_CIDR_URI}"

ENI_ID_URI="http://169.254.169.254/latest/meta-data/network/interfaces/macs/${ETH_MAC}/interface-id"
log "Metadata for location of ${NAT_INTERFACE} ENI id: ${ENI_ID_URI}"

VPC_CIDR_RANGE=$(curl --retry 3 --silent --fail ${VPC_CIDR_URI})
if [ $? -ne 0 ]; then
    log "Unable to retrive VPC CIDR range from meta-data, using 0.0.0.0/0 instead. PAT may be insecure!"
    VPC_CIDR_RANGE="0.0.0.0/0"
else
    log "Retrieved VPC CIDR range ${VPC_CIDR_RANGE} from meta-data."
fi

log "Enabling PAT..."
sysctl -q -w net.ipv4.ip_forward=1 net.ipv4.conf.all.send_redirects=0 && (
    iptables -t nat -C POSTROUTING -o ${NAT_INTERFACE} -s ${VPC_CIDR_RANGE} -j MASQUERADE 2> /dev/null ||
    iptables -t nat -A POSTROUTING -o ${NAT_INTERFACE} -s ${VPC_CIDR_RANGE} -j MASQUERADE ) ||
        die

# Some debugging output here
log "$(sysctl net.ipv4.ip_forward)"
log "$(sysctl net.ipv4.conf.all.send_redirects)"
log "$(iptables -n -t nat -L POSTROUTING)"

log "Configuration of NAT/PAT complete."

AVAILABILITY_ZONE=$(__get_availability_zone)
INSTANCE_ID=$(__get_instance_id)
VPC_ID=$(get_vpc_id "${INSTANCE_ID}")
MAIN_RT=$(get_main_rtb "${VPC_ID}")
PRIVATE_SUBNETS=($(get_private_subnets "${VPC_ID}"))
ENI_ID=$(curl --retry 3 --silent --fail "${ENI_ID_URI}")

if [ -z "${PRIVATE_SUBNETS}" ]; then
    log "No private subnet found to modify HA NAT"
    die
else
    for subnet in ${PRIVATE_SUBNETS[@]}; do
        log "Modifying route table to for the following private subnet: "${subnet}""

        rtb_id=$(get_rtb_id "${subnet}")
        if [ "${rtb_id}" == ${MAIN_RT} ]; then
            log "WARNING: "${subnet}" is associated with the VPC main route table. Nat script will not edit Main route table"
        elif [ -z "${rtb_id}" ]; then
            log "WARNING: "${subnet}" is not associated with a route table. Skipping this subnet"
        else
            log "Replacing default route for ${rtb_id} to point to instance ${instance_id} (${ENI_ID})"
            aws --region "${REGION}" ec2 replace-route --route-table-id "${rtb_id}" --destination-cidr-block 0.0.0.0/0 --network-interface-id "${ENI_ID}"
        fi
    done
fi

if [ $? -ne 0 ]; then
    die
fi

log "Disabling SourceDestCheck"
SOURCEDEST_CHECK=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI_ID}" --query 'NetworkInterfaces[].SourceDestCheck' --region "${REGION}" --output text)

# This needs to happen otherwise the NAT will not work
if [[ "${SOURCEDEST_CHECK}" != 'False' ]] || [[ "${SOURCEDEST_CHECK}" != 'false' ]]; then
    log "Setting SourceDestCheck to false"
    aws ec2 modify-network-interface-attribute --network-interface-id "${ENI_ID}" --no-source-dest-check --region "${REGION}" ||
        die "Unable to set SourceDestCheck to false"
fi

log "Configuration of HA Nat completed"
exit 0
